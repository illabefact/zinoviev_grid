/*
This example is the same code that can be found in the SPL introductory tutorial PDF file.
Please see that PDF file for a description about what this application does.
*/
namespace word.count;

composite WordCount {
	graph
		 stream <rstring filename> FilePath = DirectoryScan() {
             param
                 directory: getSubmissionTimeValue("dir");
                 sleepTime: 10.0;
                 initDelay: 1.0;                  
                 pattern : ".*\\.txt$";                 
        }
	
	
		stream <rstring lineContents, rstring fileName> Data = FileSource(FilePath) {			
			param
				format: line;
				output Data: fileName = FileName();
				// file		: "catFood.txt"; 
		} // End of FileSource.

		stream <WordStat> OneLine = Custom(Data) {
			logic
				onTuple Data: {
					map<rstring, int32> words = getWordCount(lineContents);
					
					for (rstring key in words)
					{					
						submit({file = Data.fileName, word=key, count=words[key]}, OneLine);
					}
				}
				onPunct Data: {
					println(currentPunct());
					submit(currentPunct(), OneLine);
				}
				
		}
		
		stream <WordStat> WholeFile = Custom(OneLine) {
			logic
				state: {
					mutable map<rstring, int32> res = {};
					mutable rstring fileName = "";
				}
				onTuple OneLine: {
					fileName = OneLine.file;
					addStat (res, OneLine);
				}

				onPunct OneLine: {
					if (currentPunct() == Sys.WindowMarker) 
					{
						for (rstring key in res) {
							submit({file = fileName, word=key, count=res[key]}, WholeFile);
							// println(fileName + " " + key + " : " + (rstring)res[key]);
						}
						submit(currentPunct(), WholeFile);
						println("Stored file: " + fileName);
						clearM(res);
						fileName = "";
					}
				} // End of onPunct OneLine
		} // End of Custom.
		
		() as FileSink2 = FileSink(WholeFile) {
		    	param
		    		append: true;
		    		quoteStrings: false;
		    		closeMode: dynamic; 
		    		file: WholeFile.file + ".stat";
					flush: 4u;
		    }
} // End of WordCount.

namespace word.count;

composite WordCount {
    graph
        //scans a directory with name given as command line arg.
        //returns filenames of all txt files in dir
        stream <rstring filename> FilePath = DirectoryScan() {
             param
                directory: getSubmissionTimeValue("dir");
                sleepTime: 10.0;
                initDelay: 1.0;                  
                pattern : ".*\\.txt$";                 
        }
    
        //reads a file with given filename
        //returns tuple<rstring, rstring> with one read line of file and filename.
        stream<rstring lineContents, rstring fileName> Data = FileSource(FilePath)
        {
            param
                format : line ;
            output
                Data : fileName = FileName() ;

        }
        
        //counts words in one line and passes this counts to the next operator.
        //if tuple is punctuation sign(end of file), operator just passes this puntuation to the next stream
        stream<WordStat> OneLine = Custom(Data)
        {
            logic
                onTuple Data :
                {
                    map<rstring, int32> words = getWordCount(lineContents) ;
                    for(rstring key in words)
                    {
                        submit({ file = Data.fileName, word = key, count = words [ key ] },
                            OneLine) ;
                    }
                }

                onPunct Data :
                {
                    println(currentPunct()) ;
                    submit(currentPunct(), OneLine) ;
                }
        }
        
        //Cumulates statistic for one file.
        //When operator gets a punctuation sign, which means end of file, 
        //    it passes all cumulated statistic with the name of file to the next operator.
        //    Then all internal state is erased for work with data of next file.
        stream<WordStat> WholeFile = Custom(OneLine)
        {
            logic
                state :
                {
                    mutable map<rstring, int32> res = { } ;
                    mutable rstring fileName = "" ;
                }

                onTuple OneLine :
                {
                    fileName = OneLine.file ;
                    addStat(res, OneLine) ;
                }

                onPunct OneLine :
                {
                    if(currentPunct() == Sys.WindowMarker)
                    {
                        mutable list<int32> values = [];
						
						for (rstring key in res)
						{
							appendM(values, res[key]);
						}
						
						sortM(values);				
						reverseM(values);
						
						for (int32 value in values)
						{
							rstring key = getKeyByValue(res, value);
							submit({ file = fileName, word = key, count = value }, WholeFile) ;
							removeM(res, key);
						}

                        submit(currentPunct(), WholeFile) ;
                        println("Stored file: " + fileName) ;
                        fileName = "" ;
                    }
                }
        }
        
        //Prints found statistic to the file.
        () as FileSink2 = FileSink(WholeFile)
        {
            param
                append : true ;
                quoteStrings : false ;
                closeMode : dynamic ;
                file : WholeFile.file + ".stat" ;
                flush : 4u ;
                suppress : WholeFile.file;
        }
}
